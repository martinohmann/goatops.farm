// Code generated by goa v3.4.2, DO NOT EDIT.
//
// creatures HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/martinohmann/goatops.farm/design

package client

import (
	"bytes"
	"context"
	"fmt"
	"io/ioutil"
	"net/http"
	"net/url"

	creatures "github.com/martinohmann/goatops.farm/gen/creatures"
	goahttp "goa.design/goa/v3/http"
)

// BuildListRequest instantiates a HTTP request object with method and path set
// to call the "creatures" service "list" endpoint
func (c *Client) BuildListRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ListCreaturesPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("creatures", "list", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeListResponse returns a decoder for responses returned by the creatures
// list endpoint. restoreBody controls whether the response body should be
// restored after having been read.
func DecodeListResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ListResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("creatures", "list", err)
			}
			err = ValidateListResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("creatures", "list", err)
			}
			res := NewListResultOK(&body)
			return res, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("creatures", "list", resp.StatusCode, string(body))
		}
	}
}

// BuildGetRequest instantiates a HTTP request object with method and path set
// to call the "creatures" service "get" endpoint
func (c *Client) BuildGetRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		name string
	)
	{
		p, ok := v.(*creatures.GetPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("creatures", "get", "*creatures.GetPayload", v)
		}
		name = p.Name
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetCreaturesPath(name)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("creatures", "get", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeGetResponse returns a decoder for responses returned by the creatures
// get endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodeGetResponse may return the following errors:
//   - "not_found" (type *goa.ServiceError): http.StatusNotFound
//   - error: internal error
func DecodeGetResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("creatures", "get", err)
			}
			err = ValidateGetResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("creatures", "get", err)
			}
			res := NewGetResultOK(&body)
			return res, nil
		case http.StatusNotFound:
			var (
				body GetNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("creatures", "get", err)
			}
			err = ValidateGetNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("creatures", "get", err)
			}
			return nil, NewGetNotFound(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("creatures", "get", resp.StatusCode, string(body))
		}
	}
}

// BuildRandomFactsRequest instantiates a HTTP request object with method and
// path set to call the "creatures" service "random-facts" endpoint
func (c *Client) BuildRandomFactsRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		name string
	)
	{
		p, ok := v.(*creatures.RandomFactsPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("creatures", "random-facts", "*creatures.RandomFactsPayload", v)
		}
		name = p.Name
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: RandomFactsCreaturesPath(name)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("creatures", "random-facts", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeRandomFactsRequest returns an encoder for requests sent to the
// creatures random-facts server.
func EncodeRandomFactsRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*creatures.RandomFactsPayload)
		if !ok {
			return goahttp.ErrInvalidType("creatures", "random-facts", "*creatures.RandomFactsPayload", v)
		}
		values := req.URL.Query()
		if p.N != nil {
			values.Add("n", fmt.Sprintf("%v", *p.N))
		}
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeRandomFactsResponse returns a decoder for responses returned by the
// creatures random-facts endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeRandomFactsResponse may return the following errors:
//   - "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//   - "not_found" (type *goa.ServiceError): http.StatusNotFound
//   - error: internal error
func DecodeRandomFactsResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body RandomFactsResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("creatures", "random-facts", err)
			}
			err = ValidateRandomFactsResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("creatures", "random-facts", err)
			}
			res := NewRandomFactsResultOK(&body)
			return res, nil
		case http.StatusBadRequest:
			var (
				body RandomFactsBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("creatures", "random-facts", err)
			}
			err = ValidateRandomFactsBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("creatures", "random-facts", err)
			}
			return nil, NewRandomFactsBadRequest(&body)
		case http.StatusNotFound:
			var (
				body RandomFactsNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("creatures", "random-facts", err)
			}
			err = ValidateRandomFactsNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("creatures", "random-facts", err)
			}
			return nil, NewRandomFactsNotFound(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("creatures", "random-facts", resp.StatusCode, string(body))
		}
	}
}

// unmarshalCreatureResponseBodyToCreaturesCreature builds a value of type
// *creatures.Creature from a value of type *CreatureResponseBody.
func unmarshalCreatureResponseBodyToCreaturesCreature(v *CreatureResponseBody) *creatures.Creature {
	res := &creatures.Creature{
		Name: *v.Name,
	}
	res.Facts = make([]string, len(v.Facts))
	for i, val := range v.Facts {
		res.Facts[i] = val
	}

	return res
}
