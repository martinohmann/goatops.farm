// Code generated by goa v3.4.2, DO NOT EDIT.
//
// goatopsfarm HTTP client CLI support package
//
// Command:
// $ goa gen github.com/martinohmann/goatops.farm/design

package cli

import (
	"flag"
	"fmt"
	"net/http"
	"os"

	creaturesc "github.com/martinohmann/goatops.farm/gen/http/creatures/client"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//	command (subcommand1|subcommand2|...)
func UsageCommands() string {
	return `creatures (list|get|random-facts)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` creatures list` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, interface{}, error) {
	var (
		creaturesFlags = flag.NewFlagSet("creatures", flag.ContinueOnError)

		creaturesListFlags = flag.NewFlagSet("list", flag.ExitOnError)

		creaturesGetFlags    = flag.NewFlagSet("get", flag.ExitOnError)
		creaturesGetNameFlag = creaturesGetFlags.String("name", "REQUIRED", "Name of the creature")

		creaturesRandomFactsFlags    = flag.NewFlagSet("random-facts", flag.ExitOnError)
		creaturesRandomFactsNameFlag = creaturesRandomFactsFlags.String("name", "REQUIRED", "Name of the creature")
		creaturesRandomFactsNFlag    = creaturesRandomFactsFlags.String("n", "", "")
	)
	creaturesFlags.Usage = creaturesUsage
	creaturesListFlags.Usage = creaturesListUsage
	creaturesGetFlags.Usage = creaturesGetUsage
	creaturesRandomFactsFlags.Usage = creaturesRandomFactsUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "creatures":
			svcf = creaturesFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "creatures":
			switch epn {
			case "list":
				epf = creaturesListFlags

			case "get":
				epf = creaturesGetFlags

			case "random-facts":
				epf = creaturesRandomFactsFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     interface{}
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "creatures":
			c := creaturesc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "list":
				endpoint = c.List()
				data = nil
			case "get":
				endpoint = c.Get()
				data, err = creaturesc.BuildGetPayload(*creaturesGetNameFlag)
			case "random-facts":
				endpoint = c.RandomFacts()
				data, err = creaturesc.BuildRandomFactsPayload(*creaturesRandomFactsNameFlag, *creaturesRandomFactsNFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// creaturesUsage displays the usage of the creatures command and its
// subcommands.
func creaturesUsage() {
	fmt.Fprintf(os.Stderr, `The creatures service provides you with farm creatures and facts about them.
Usage:
    %s [globalflags] creatures COMMAND [flags]

COMMAND:
    list: List implements list.
    get: Get implements get.
    random-facts: RandomFacts implements random-facts.

Additional help:
    %s creatures COMMAND --help
`, os.Args[0], os.Args[0])
}
func creaturesListUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] creatures list

List implements list.

Example:
    `+os.Args[0]+` creatures list
`, os.Args[0])
}

func creaturesGetUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] creatures get -name STRING

Get implements get.
    -name STRING: Name of the creature

Example:
    `+os.Args[0]+` creatures get --name "goat"
`, os.Args[0])
}

func creaturesRandomFactsUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] creatures random-facts -name STRING -n INT

RandomFacts implements random-facts.
    -name STRING: Name of the creature
    -n INT: 

Example:
    `+os.Args[0]+` creatures random-facts --name "goat" --n 3
`, os.Args[0])
}
